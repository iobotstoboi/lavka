{
  "name": "prng-well1024a",
  "version": "1.0.1",
  "description": "Random number generator based on WELL-1024a algorithm.",
  "main": "well1024a.js",
  "scripts": {
    "test": "node_modules/mocha/bin/mocha",
    "prepublish": "npm test && npm run-script browser && npm run-script test-distribution && echo Prepublish Checks OK",
    "browser": "node ./bundle.js && node_modules/uglify-js/bin/uglifyjs --unsafe -o browser/well1024a.min.js browser/well1024a.js",
    "test-distribution": "node_modules/mocha/bin/mocha -R landing -t 300000 -s 300000 test-distribution/",
    "prepare-webclient-tests": "git submodule update --init --recursive"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/deestan/well1024a.git"
  },
  "keywords": [
    "prng",
    "rng",
    "random"
  ],
  "devDependencies": {
    "mocha": "~1.2.0",
    "uglify-js": "~1.3.0"
  },
  "author": {
    "name": "Helge Skogly Holm",
    "email": "helge.holm@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/deestan/well1024a/issues"
  },
  "readme": "# well1024a.js\n\n[![NPM](https://nodei.co/npm/prng-well1024a.png)](https://nodei.co/npm/prng-well1024a/)\n\nThis is a Javascript implementation of the\n[WELL-1024a](http://en.wikipedia.org/wiki/Well_equidistributed_long-period_linear)\npseudorandom number generation algorithm.\n\nJavascript's built-in `Math.random()` function is\n[implementation-dependent](http://www.ecma-international.org/publications/standards/Ecma-262.htm)\nand therefore of limited usefulness if your program depends on random\nnumbers, as you risk running into crappy implementations.  Even the V8\nengine (used by Node.js) only provides 32-bit entropy, and is based on\nthe platform-dependent C++ `rand()` function.\n\nThis module is very bare-bones.  I have also written a randomness library called\n[randy](http://github.com/deestan/randy.git) that provides useful functions like\n`RandInt(min, max)`, `shuffle(array)` etc., based on this module.\n\n## Quick Example\n\n```javascript\nvar rng = well1024a();\nvar number = rng.getUInt32();\nvar coin = ['heads', 'tails'][number % 2];\n// coin == 'heads'\n```\n\n<a name=\"Download\" />\n## Download\n\nFor [Node.js](http://nodejs.org/), use [npm](http://npmjs.org/):\n\n    npm install prng-well1024a\n\n<a name=\"browser\" />\n### In the Browser\n\nDownload and include as a `<script>`.  The module will be available as\nthe global object `randy`.\n\n__Development:__ [well1024a.js](https://github.com/deestan/well1024a/raw/master/browser/well1024a.js) - 2Kb Uncompressed\n\n__Production:__ [well1024a.min.js](https://github.com/deestan/well1024a/raw/master/browser/well1024a.min.js) - < 1Kb Minified\n\n__Example__\n\n```html\n<script src=\"well1024a.min.js\"></script>\n\nI am <span id=\"age\"></span> years old!\n\n<script>\n    var n = document.getElementById(\"age\");\n    var myAge = well1024a.getUInt32();\n    n.innerText = myAge.toString();\n</script>\n```\n\n## Documentation\n\n### Constructor\n\n* [well1024a](#well1024a)\n\n### Instance Functions\n\n* [getUInt32](#getUInt32)\n* [getState](#getstate)\n* [setState](#setState)\n\n-----------------------------------\n\n<a name=\"well1024a\" />\n## well1024a(entropy)\n## well1024a()\n\nReturns a new well1024a instance, which is an object with 3 functions:\n\n* [getUInt32](#getUInt32)\n* [getState](#getstate)\n* [setState](#setState)\n\nThe instance will use `Math.random()` to fill out the initial seed state.\n\n__Arguments__\n\n* entropy - default=[].  Array of numbers to add to the initial seed.  These should be based on environmental values that are likely to be different on each run such as system time, process ID, browser window height, values from `/dev/urandom` etc.\n\n__Example__\n\n```javascript\nvar w = well1024a([\n    Date.now(),\n    os.freemem(),\n    process.pid\n]);\n```\n\n-----------------------------------\n\n<a name=\"getUInt32\" />\n## getUInt32()\n\nReturns a random positive integer less than 2^32.\n\n__Example__\n\n```javascript\nvar w = well1024a();\n\nconsole.log('For Christmas this year, I want ' + w.getUInt32().toString() + ' ponies!');\n```\n\n-----------------------------------\n\n<a name=\"getState\" />\n## getState()\n\nReturns an object representing the current state of the random number generator.\n\nThe object can safely be converted to and restored from JSON.\n\nThis object can be used as a parameter to `setState`.\n\n-----------------------------------\n\n<a name=\"setState\" />\n## setState(state)\n\nSets the random number generator to a specific state, allowing for replay of random values.\n\n__Arguments__\n\n* state - Must be object retrieved from an earlier call to `getState()`.\n\n__Example__\n\nThis will flip a pair of coins, reset the generator state, and flip the\ncoins again with the exact same output.\n\n```javascript\nvar w = well1024a();\nvar coins = ['heads', 'tails'];\n\nconsole.log(\"Flippin' the coins:\");\nvar state = w.getState();\nvar d1 = coins[w.getUInt32() % 2];\nvar d2 = coins[w.getUInt32() % 2];\nconsole.log(d1 + \" and \" + d2);\n\nconsole.log(\"Instant replay:\");\nw.setState(state);\nd1 = coins[w.getUInt32() % 2];\nd2 = coins[w.getUInt32() % 2];\nconsole.log(d1 + \" and \" + d2);\n```\n\n---------------------------------------\n\n## Notes\n\nNo functions rely on `this`, so it's safe to e.g. assign\n`randy.good.randInt` to a variable or pass it around as a\nparameter.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/deestan/well1024a",
  "_id": "prng-well1024a@1.0.1",
  "dist": {
    "shasum": "c1580f58910642fd5dadf236ff87e9cf73a94dff"
  },
  "_from": "prng-well1024a@~1.0.0",
  "_resolved": "https://registry.npmjs.org/prng-well1024a/-/prng-well1024a-1.0.1.tgz"
}
