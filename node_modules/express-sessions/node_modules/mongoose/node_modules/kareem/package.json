{
  "name": "kareem",
  "version": "0.0.4",
  "description": "Next-generation take on pre/post function hooks",
  "main": "index.js",
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha ./test/*"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/vkarpov15/kareem.git"
  },
  "devDependencies": {
    "acquit": "0.0.3",
    "mocha": "2.0.0"
  },
  "author": {
    "name": "Valeri Karpov",
    "email": "val@karpov.io"
  },
  "license": "Apache 2.0",
  "readme": "# kareem\n\nNext-generation take on the [hooks](http://npmjs.org/package/hooks), meant to offer additional flexibility in allowing you to execute hooks whenever necessary, as opposed to simply wrapping a single function.\n\nNamed for the NBA's all-time leading scorer Kareem Abdul-Jabbar, known for his mastery of the [hook shot](http://en.wikipedia.org/wiki/Kareem_Abdul-Jabbar#Skyhook)\n\n<img src=\"http://upload.wikimedia.org/wikipedia/commons/0/00/Kareem-Abdul-Jabbar_Lipofsky.jpg\" width=\"220\">\n\n## pre hooks\n\n#### It runs without any hooks specified\n\n```javascript\n    \n    hooks.execPre('cook', null, function() {\n      done();\n    });\n  \n```\n\n#### It runs basic serial pre hooks\n\n```javascript\n    \n    var count = 0;\n\n    hooks.pre('cook', function(done) {\n      ++count;\n      done();\n    });\n\n    hooks.execPre('cook', null, function() {\n      assert.equal(1, count);\n      done();\n    });\n  \n```\n\n#### It can run multipe pres\n\n```javascript\n    \n    var count1 = 0;\n    var count2 = 0;\n\n    hooks.pre('cook', function(done) {\n      ++count1;\n      done();\n    });\n\n    hooks.pre('cook', function(done) {\n      ++count2;\n      done();\n    });\n\n    hooks.execPre('cook', null, function() {\n      assert.equal(1, count1);\n      assert.equal(1, count2);\n      done();\n    });\n  \n```\n\n#### It can run fully synchronous pres\n\n```javascript\n    \n    var count1 = 0;\n    var count2 = 0;\n\n    hooks.pre('cook', function() {\n      ++count1;\n    });\n\n    hooks.pre('cook', function() {\n      ++count2;\n    });\n\n    hooks.execPre('cook', null, function() {\n      assert.equal(1, count1);\n      assert.equal(1, count2);\n      done();\n    });\n  \n```\n\n#### It properly attaches context to pre hooks\n\n```javascript\n    \n    hooks.pre('cook', function(done) {\n      this.bacon = 3;\n      done();\n    });\n\n    hooks.pre('cook', function(done) {\n      this.eggs = 4;\n      done();\n    });\n\n    var obj = { bacon: 0, eggs: 0 };\n\n    hooks.execPre('cook', obj, function() {\n      assert.equal(3, obj.bacon);\n      assert.equal(4, obj.eggs);\n      done();\n    });\n  \n```\n\n#### It can execute parallel (async) pre hooks\n\n```javascript\n    \n    hooks.pre('cook', true, function(next, done) {\n      this.bacon = 3;\n      next();\n      setTimeout(function() {\n        done();\n      }, 5);\n    });\n\n    hooks.pre('cook', true, function(next, done) {\n      next();\n      var _this = this;\n      setTimeout(function() {\n        _this.eggs = 4;\n        done();\n      }, 10);\n    });\n\n    hooks.pre('cook', function(next) {\n      this.waffles = false;\n      next();\n    });\n\n    var obj = { bacon: 0, eggs: 0 };\n\n    hooks.execPre('cook', obj, function() {\n      assert.equal(3, obj.bacon);\n      assert.equal(4, obj.eggs);\n      assert.equal(false, obj.waffles);\n      done();\n    });\n  \n```\n\n## post hooks\n\n#### It runs without any hooks specified\n\n```javascript\n    \n    hooks.execPost('cook', null, [1], function(error, eggs) {\n      assert.ifError(error);\n      assert.equal(1, eggs);\n      done();\n    });\n  \n```\n\n#### It executes with parameters passed in\n\n```javascript\n    \n    hooks.post('cook', function(eggs, bacon, callback) {\n      assert.equal(1, eggs);\n      assert.equal(2, bacon);\n      callback();\n    });\n\n    hooks.execPost('cook', null, [1, 2], function(error, eggs, bacon) {\n      assert.ifError(error);\n      assert.equal(1, eggs);\n      assert.equal(2, bacon);\n      done();\n    });\n  \n```\n\n## wrap()\n\n#### It wraps pre and post calls into one call\n\n```javascript\n    \n    hooks.pre('cook', true, function(next, done) {\n      this.bacon = 3;\n      next();\n      setTimeout(function() {\n        done();\n      }, 5);\n    });\n\n    hooks.pre('cook', true, function(next, done) {\n      next();\n      var _this = this;\n      setTimeout(function() {\n        _this.eggs = 4;\n        done();\n      }, 10);\n    });\n\n    hooks.pre('cook', function(next) {\n      this.waffles = false;\n      next();\n    });\n\n    hooks.post('cook', function(obj) {\n      obj.tofu = 'no';\n    });\n\n    var obj = { bacon: 0, eggs: 0 };\n\n    var args = [obj];\n    args.push(function(error, result) {\n      assert.ifError(error);\n      assert.equal(3, obj.bacon);\n      assert.equal(4, obj.eggs);\n      assert.equal(false, obj.waffles);\n      assert.equal('no', obj.tofu);\n\n      assert.equal(obj, result);\n      done();\n    });\n\n    hooks.wrap(\n      'cook',\n      function(o, callback) {\n        assert.equal(3, obj.bacon);\n        assert.equal(4, obj.eggs);\n        assert.equal(false, obj.waffles);\n        assert.equal(undefined, obj.tofu);\n        callback(null, o);\n      },\n      obj,\n      args);\n  \n```\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/vkarpov15/kareem/issues"
  },
  "homepage": "https://github.com/vkarpov15/kareem",
  "_id": "kareem@0.0.4",
  "dist": {
    "shasum": "ea17a0dd79f0a03851ac3d0c2e14c4f1aa458b5d"
  },
  "_from": "kareem@0.0.4",
  "_resolved": "https://registry.npmjs.org/kareem/-/kareem-0.0.4.tgz"
}
